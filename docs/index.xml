<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>文档 on ∆STAREVAN</title>
    <link>https://kunieone.github.io/docs/</link>
    <description>Recent content in 文档 on ∆STAREVAN</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>@Starevan
</copyright>
    <lastBuildDate>Fri, 17 Jun 2022 10:12:31 +0800</lastBuildDate><atom:link href="https://kunieone.github.io/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/easystackdevelopment/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/easystackdevelopment/</guid>
      <description>页面路由 BASEURL = memorite.cn 主页路由 / 主页
用户信息路由/user (该路由跳到 404/nouser)
/user/me 我的账号主页预览,如果未登陆，显示注册登陆页面 /user/[uuid] 用户账号主页预览 404 页面 /404
404/nouser 查询不到用户
404/noarticle 查询不到文章
404/nospecial 查询不到专栏
文章页面 /article (该路由跳转到 404/noarticle)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/golang/golang%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/golang/golang%E5%8D%8F%E7%A8%8B/</guid>
      <description>Golang协程调度 go调度器的由来 单进程时代：
单一执行，计算机一个任务一个任务处理 多进程操作系统：
使用CPU调度器： 不同的时间片ABC轮流执行 多进程带来了新的问题： 时间片的切换成本（保存现场） 并且使得开发设计变得复杂（状态锁，同步等问题） 为了保证多任务，开了很多线程，高度消耗调度CPU并且消耗内存 进程占用 4GB 线程占用4M 操作系统分为 用户态和内核态
如果我们让内核只看到一个线程，在线程里面开多个小线程（co-routine）协程
1比N
![image-20220607143714277](/Users/jiangxinghuai/Library/Application Support/typora-user-images/image-20220607143714277.png)
M比N：
![image-20220607143904604](/Users/jiangxinghuai/Library/Application Support/typora-user-images/image-20220607143904604.png)
对于go语言，它把
co-routine改成了goroutine，修改了内存（几KB）</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/nestjs/controller/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/nestjs/controller/</guid>
      <description>Controller（控制器）负责处理即将到来的请求并且返回响应给客户端。 controller的意图是接收一个特定的请求，路由机制控制了哪个controller将会接收哪些请求。常常每一个controller都有不止一个路由，并且不同的路由执行不同的动作。
为了构建一个基本的controller，我们使用类与装饰器。装饰器能够联系一些类的元数据并且使Nest可以构建路由映射表。（将请求和对应的controller绑定）
提示
你可以使用CRUD生成器nest g resource [name]来快速构建内建的CRUD控制器。
Routing（路由） 在接下来的示例中，我们将使用@Controller装饰器，它需要定义一个基础的controller。我们选择特定一个路由路径，叫做cats。把cats字符串放到装饰器里面
@Controller(&amp;ldquo;cats&amp;rdquo;)，装饰器允许我们轻易地构建一组相关路由的集合，并且最小化重复的代码。
提示
你可以使用CLI nest g controller(co) cats来生成猫路由。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/nestjs/%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/nestjs/%E4%BB%8B%E7%BB%8D/</guid>
      <description>NESTJS NESTJS 介绍 ​	Nestjs是一个用于构建大规模的nodejs服务端应用程序的的高效率框架，它使用的是渐进的Javascript，并且完全支持Typescript（也支持仅使用Javascript开发）并且结合了面向对象编程、函数式编程和函数响应式编程的思想。
​	在这个框架下，Nest充分使用了如Express这样高可靠性的HTTP框架并且同时也可以支持Fastify！！
​	Nest提供了一个在Nodejs框架（Express/Fastify）之上的抽象级，并且直接把express的API暴露给开发者这给了开发者选择使用无数底层平台第三方库的自由
NESTJS 哲学 在近些年内，多亏了Node.js使得Javascript可以成为前后端应用开发的通用语言，这也导致了比如一些像Angular，React和Vue项目的兴起，它们极大的提升了开发者构建更快，可测试，可拓展的前端应用的效率。不过，尽管有很多为Node.js准备的很棒的库，指导和工具，单没有一个解决了“架构”层面上的这个核心问题。
​	NEST提供了一个开箱即用的应用架构服务，允许了开发者和团队能够构建高可测试性，大规模，松耦合并且易维护的应用。该架构理念灵感来自Angular。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/untitled/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/untitled/</guid>
      <description>作者：苏七摘文 链接：https://zhuanlan.zhihu.com/p/503913403 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
动词一字部：
抓，搞，上，下，出，想，谋
动词二字部：
分析，研究，了解，掌握，发现，提出，推进，推动，制定，出台，完善，建立，健全，加强，强化，增强，促进，加深，深化，扩大，落实，细化，突出，建设，营造，开展，发挥，发扬，创新，转变，发展，统一，提高，提升，保持，优化，召开，举行，贯彻，执行，树立，引导，规范，整顿，服务，协调，沟通，配合，合作，支持，加大，开拓，拓展，巩固，保障，保证，形成，指导
名词：
体系，机制，体制，系统，规划，战略，方针，政策，措施，要点，重点，焦点，难点，热点，亮点，矛盾，问题，建设，思想，认识，作风，整治，环境，秩序，作用，地方，基层，传统，运行，监测，监控，调控，监督，工程，计划，行动，创新，增长，方式，模式，转变，质量，水平，效益，会议，文件，精神，意识，服务，协调，沟通，力度，领域，空间，成绩，成就，进展，实效，基础，前提，关键，保障，动力，条件，环节，方法，思路，设想，途径，道路，主意，办法，力气，功夫，台阶，形势，情况，意见，建议，网络，指导，指南，目录，方案
形容词一字部：
多，宽，高，大，好，快，省，新
形容词二字部：
持续，快速，协调，健康，公平，公正，公开，透明，富强，民主，文明，和谐，祥和，优良，良好，合理，稳定，平衡，均衡，稳健，平稳，统一，现代
副词一字部：
狠，早，细，实，好，很，较，再，更
副词二字部：
加快，尽快，抓紧，尽早，整体，充分，继续，深入，自觉，主动，自主，密切，大力，全力，尽力，务必，务求，有效
副词三字部：
进一步
后缀：
化，型，性
词组：
统一思想，提高认识，认清形势，明确任务，加强领导，完善机制，交流经验，研究问题，团结协作，密切配合，真抓实干，开拓进取，突出重点，落实责任，各司其职，各负其责，集中精力，聚精会神，一心一意，心无旁骛，兢兢业业，精益求精，一抓到底，爱岗敬业，求真务实，胸怀全局，拓宽视野。
“新”系列：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E5%8D%95%E8%AF%8D/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E5%8D%95%E8%AF%8D/</guid>
      <description>denizen 居住条件
purport
savour
reassure
intrusive
hundrum
tapeworm
disfavour
airstrip
scowl
expedient
desegregate
mime
newsreel
irritant
purely
ledge
organ
barrow
starboard
iodide
demote
conscript
picket 罢工纠察</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80assembly/arm%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80assembly/arm%E4%BB%8B%E7%BB%8D/</guid>
      <description>Arm是啥？ ARM是一个公司，是为精简指令集计算机微处理器提供解决方案的。 arm并不生产芯片，这是出知识产权的。
RISC 精简指令集
C语言 -1-&amp;gt; 汇编 -2-&amp;gt;01指令
2:指令的格式怎么统一？ARM就是这个解决方案
MOV R0, #1 这串指令 ，直接解析成机器码。
arm做的事情就是对指令进行怎么翻译，采用的是流水线的技术。
ARM公司的工作模式： ![image-20220525131045628](/Users/jiangxinghuai/Library/Application Support/typora-user-images/image-20220525131045628.png)
OEM 代工生产公司，把产品制造出来。
很多电子产品的应用模式都是这样的。
ARM的优势 微处理器支持Thumb双指令集，可以兼容 ARM8/16位器件。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E9%9A%8F%E6%83%B3%E4%BD%9C%E6%96%87/2013%E8%8B%B1%E4%B8%80%E5%B0%8F%E4%BD%9C%E6%96%87/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E9%9A%8F%E6%83%B3%E4%BD%9C%E6%96%87/2013%E8%8B%B1%E4%B8%80%E5%B0%8F%E4%BD%9C%E6%96%87/</guid>
      <description>2013 英一小作文 (2013) Write an e-mail of about 100 words to a foreign teacher in your college, inviting him/her to be a judge for the upcoming English speech contest.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E9%9A%8F%E6%83%B3%E4%BD%9C%E6%96%87/%E8%A8%80%E8%AE%BA%E8%87%AA%E7%94%B1/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E9%9A%8F%E6%83%B3%E4%BD%9C%E6%96%87/%E8%A8%80%E8%AE%BA%E8%87%AA%E7%94%B1/</guid>
      <description>Appropriate Freedom of Speech ​ America has long been one of the most free speech nations. Instead, China is the target of criticism from the Western media for its &amp;ldquo;lack of freedom of speech&amp;rdquo;.</description>
    </item>
    
  </channel>
</rss>
