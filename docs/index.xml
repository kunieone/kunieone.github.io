<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>文档 on ∆STAREVAN</title>
    <link>https://kunieone.github.io/docs/</link>
    <description>Recent content in 文档 on ∆STAREVAN</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>@Starevan
</copyright>
    <lastBuildDate>Fri, 17 Jun 2022 10:12:31 +0800</lastBuildDate><atom:link href="https://kunieone.github.io/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/7/2/</link>
      <pubDate>Sat, 02 Jul 2022 03:28:14 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/7/2/</guid>
      <description>mafia-黑手党
Britain has for decades helped a mafia state stash its stolen money.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/1/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/1/</guid>
      <description>深入理解操作系统 第一章 第一章的主要内容是 : 操作系统的一些知识
操作系统是什么？ 用户角度：操作系统是一个控制软件
管理应用程序
为应用程序提供服务
杀死应用程序</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/10/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/10/</guid>
      <description>深入理解操作系统 第十章 第十章的主要内容是：信号量和管程
信号量 信号量的抽象数据类型
一个整形(sem),具有两个原子操作 P(): sem减一,如果sem&amp;lt;0,等待,否则继续 V(): sem加一,如果sem≤0,唤醒一个等待的P 信号量是整数</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/11/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/11/</guid>
      <description>深入理解操作系统 第十一章 第十一章的主要内容是：死锁和进程通信
死锁问题 一组阻塞的进程持有一种资源等待获取另一个进程所占有的一个资源
示例:
系统有2个磁带驱动器 P1和P2各有一个,都需要另外一个 系统模型 资源类型R1,R2,..,Rm(CPU, memory space, IO devices)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/12/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/12/</guid>
      <description>深入理解操作系统 第十二章 第十二章的主要内容是：文件管理
基本概念 文件系统和文件 文件系统: 一种用于持久性存储的系统抽象
在存储上: 组织,控制,导航,访问和检索数据 在大多数计算机系统包含文件系统 个人电脑,服务器,笔记本电脑 ipod,tivo,机顶盒,手机,电脑 google可能也是由一个文件系统构成的 文件: 文件系统中的一个单元的相关数据在操作系统中的抽象</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/2/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/2/</guid>
      <description>深入理解操作系统 第二章 第二章的主要内容是 : 操作系统的异常/中断/系统调用
计算机探究计算机启动过程 作用解析
Disk : 存放OS和Bootloader</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/3/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/3/</guid>
      <description>深入理解操作系统 第三章 第三章的主要内容是：操作系统的物理内存管理
计算机体系结构 CPU 内存 I/O 内存分层体系 内存分层体系 运行内存(主存) / 磁盘(虚拟内存).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/4/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/4/</guid>
      <description>深入理解操作系统 第四章 第四章的主要内容是：操作系统的非连续内存分配
第三章介绍的是连续内存管理, 即 : 操作系统加载到内存以及程序加载到内存中时, 分配一块连续的空闲(内存)块. 但是容易出现碎片问题, 这一章介绍的非连续内存分配可以有效的减少碎片的出现.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/5/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/5/</guid>
      <description>深入理解操作系统 第五章 第五章的主要内容是：操作系统的虚拟内存管理技术
虚拟内存的起因 使用硬盘/磁盘使更多的程序在有限的内存中运行
理想的存储器 : 更大更快更便宜和非易失性的存储区
覆盖技术 如果是程序太大, 超出了内存的容量, 可以采用手动的概率(overlay)技术, 只把需要的指令和数据保存在内存当中</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/6/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/6/</guid>
      <description>深入理解操作系统 第六章 第六章的主要内容是：操作系统的虚拟内存管理技术中的页面置换算法
功能与目标 功能 : 当缺页中断发生, 需要调入新的页面而内存已满时, 选择内存当中哪个物理页面被置换.
目标 : 尽可能地减少页面的换进换出次数(即缺页中断的次数).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/7/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/7/</guid>
      <description>深入理解操作系统 第七章 第七章的主要内容是：进程
进程(process)描述 进程定义 进程 : 一个具有一定独立功能的程序在一个数据集合上的一次动态执行过程.
进程的组成 进程包括 :</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/8/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/8/</guid>
      <description>深入理解操作系统 第八章 第八章的主要内容是：调度算法(感觉清华这门课程前几章比较精彩,后续讲的有点混乱)
背景 上下文切换 切换CPU的当前任务, 从一个进程/线程到另一个 保存当前进程/线程在PCB/TCB中的执行上下文(CPU状态) 读取下一个进程/线程的上下文 CPU调度 从就绪队列中挑选一个进程/线程作为CPU将要运行的下一个进程/线程 调度程序: 挑选进程/线程的内核函数(通过一些调度策略) 什么时候进行调度?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/9/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/9/</guid>
      <description>深入理解操作系统 第九章 第九章的主要内容是：同步
背景 第一章到第八章内容, 到目前为止
多道程序设计: 现代操作系统的重要特性 并行很有用(为什么?) 提示: 多个并发实体: CPU IO 用户 等 进程,线程: 操作系统抽象出来用于支持多道程序设计 CPU调度: 实现多道程序设计的机制 调度算法: 不同的策略 独立的线程:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/easystackdevelopment/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/easystackdevelopment/</guid>
      <description>页面路由 BASEURL = memorite.cn 主页路由 / 主页
用户信息路由/user (该路由跳到 404/nouser)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/golang/golang%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/golang/golang%E5%8D%8F%E7%A8%8B/</guid>
      <description>Golang协程调度 go调度器的由来 单进程时代：
单一执行，计算机一个任务一个任务处理 多进程操作系统：
使用CPU调度器： 不同的时间片ABC轮流执行 多进程带来了新的问题： 时间片的切换成本（保存现场） 并且使得开发设计变得复杂（状态锁，同步等问题） 为了保证多任务，开了很多线程，高度消耗调度CPU并且消耗内存 进程占用 4GB 线程占用4M 操作系统分为 用户态和内核态</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/nestjs/controller/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/nestjs/controller/</guid>
      <description>Controller（控制器）负责处理即将到来的请求并且返回响应给客户端。 controller的意图是接收一个特定的请求，路由机制控制了哪个controller将会接收哪些请求。常常每一个controller都有不止一个路由，并且不同的路由执行不同的动作。
为了构建一个基本的controller，我们使用类与装饰器。装饰器能够联系一些类的元数据并且使Nest可以构建路由映射表。（将请求和对应的controller绑定）
提示
你可以使用CRUD生成器nest g resource [name]来快速构建内建的CRUD控制器。
Routing（路由） 在接下来的示例中，我们将使用@Controller装饰器，它需要定义一个基础的controller。我们选择特定一个路由路径，叫做cats。把cats字符串放到装饰器里面</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/nestjs/%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/nestjs/%E4%BB%8B%E7%BB%8D/</guid>
      <description>NESTJS NESTJS 介绍 ​	Nestjs是一个用于构建大规模的nodejs服务端应用程序的的高效率框架，它使用的是渐进的Javascript，并且完全支持Typescript（也支持仅使用Javascript开发）并且结合了面向对象编程、函数式编程和函数响应式编程的思想。
​	在这个框架下，Nest充分使用了如Express这样高可靠性的HTTP框架并且同时也可以支持Fastify！！
​	Nest提供了一个在Nodejs框架（Express/Fastify）之上的抽象级，并且直接把express的API暴露给开发者这给了开发者选择使用无数底层平台第三方库的自由
NESTJS 哲学 在近些年内，多亏了Node.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/untitled/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/untitled/</guid>
      <description>作者：苏七摘文 链接：https://zhuanlan.zhihu.com/p/503913403 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
动词一字部：
抓，搞，上，下，出，想，谋
动词二字部：
分析，研究，了解，掌握，发现，提出，推进，推动，制定，出台，完善，建立，健全，加强，强化，增强，促进，加深，深化，扩大，落实，细化，突出，建设，营造，开展，发挥，发扬，创新，转变，发展，统一，提高，提升，保持，优化，召开，举行，贯彻，执行，树立，引导，规范，整顿，服务，协调，沟通，配合，合作，支持，加大，开拓，拓展，巩固，保障，保证，形成，指导
名词：
体系，机制，体制，系统，规划，战略，方针，政策，措施，要点，重点，焦点，难点，热点，亮点，矛盾，问题，建设，思想，认识，作风，整治，环境，秩序，作用，地方，基层，传统，运行，监测，监控，调控，监督，工程，计划，行动，创新，增长，方式，模式，转变，质量，水平，效益，会议，文件，精神，意识，服务，协调，沟通，力度，领域，空间，成绩，成就，进展，实效，基础，前提，关键，保障，动力，条件，环节，方法，思路，设想，途径，道路，主意，办法，力气，功夫，台阶，形势，情况，意见，建议，网络，指导，指南，目录，方案</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E5%8D%95%E8%AF%8D/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E5%8D%95%E8%AF%8D/</guid>
      <description>denizen 居住条件
purport
savour
reassure
intrusive
hundrum
tapeworm
disfavour
airstrip</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80assembly/arm%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80assembly/arm%E4%BB%8B%E7%BB%8D/</guid>
      <description>Arm是啥？ ARM是一个公司，是为精简指令集计算机微处理器提供解决方案的。 arm并不生产芯片，这是出知识产权的。
RISC 精简指令集
C语言 -1-&amp;gt; 汇编 -2-&amp;gt;01指令
2:指令的格式怎么统一？ARM就是这个解决方案</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E9%9A%8F%E6%83%B3%E4%BD%9C%E6%96%87/2013%E8%8B%B1%E4%B8%80%E5%B0%8F%E4%BD%9C%E6%96%87/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E9%9A%8F%E6%83%B3%E4%BD%9C%E6%96%87/2013%E8%8B%B1%E4%B8%80%E5%B0%8F%E4%BD%9C%E6%96%87/</guid>
      <description>2013 英一小作文 (2013) Write an e-mail of about 100 words to a foreign teacher in your college, inviting him/her to be a judge for the upcoming English speech contest.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E9%9A%8F%E6%83%B3%E4%BD%9C%E6%96%87/%E8%A8%80%E8%AE%BA%E8%87%AA%E7%94%B1/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E9%9A%8F%E6%83%B3%E4%BD%9C%E6%96%87/%E8%A8%80%E8%AE%BA%E8%87%AA%E7%94%B1/</guid>
      <description>Appropriate Freedom of Speech ​ America has long been one of the most free speech nations.</description>
    </item>
    
  </channel>
</rss>
