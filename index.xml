<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>∆STAREVAN</title>
    <link>https://kunieone.github.io/</link>
    <description>Recent content on ∆STAREVAN</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>@Starevan
</copyright>
    <lastBuildDate>Sat, 18 Jun 2022 03:28:40 +0800</lastBuildDate><atom:link href="https://kunieone.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux 下文件的三个时间：ctime、mtime、atime 的区别</title>
      <link>https://kunieone.github.io/posts/linux_time/</link>
      <pubDate>Sat, 18 Jun 2022 03:28:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/posts/linux_time/</guid>
      <description>Linux 下文件的三个时间：ctime、mtime、atime 的区别
modification time(mtime):内容修改时间
这里的修改时间指的是文件的内容发生变化，而更新的时间。
Eg:vi 后保存文件。
status time(ctime):状态修改时间
这里的修改时间指的是文件的属性或者权限发生变化，而更新的时间。
Eg:通过 chmod、chown 命令修改一次文件属性，这个时间就会更新。
access time(atime):最后访问时间
这里的访问时间是指文件被读取，而更新的时间。</description>
    </item>
    
    <item>
      <title>想法:脚本自动给文章添加时间</title>
      <link>https://kunieone.github.io/posts/%E6%83%B3%E6%B3%95%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E7%BB%99%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E6%97%B6%E9%97%B4/</link>
      <pubDate>Sat, 18 Jun 2022 03:05:22 +0800</pubDate>
      
      <guid>https://kunieone.github.io/posts/%E6%83%B3%E6%B3%95%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E7%BB%99%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E6%97%B6%E9%97%B4/</guid>
      <description>目前的想法: 使用 node 给文档添加时间 流程 解析文件的创建时间和修改时间 脚本解析 md 脚本，如果没有，添加一个。 </description>
    </item>
    
    <item>
      <title>NodeList和HTMLCollection有什么区别</title>
      <link>https://kunieone.github.io/posts/nodelist%E5%92%8Chtmlcollection%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sat, 18 Jun 2022 03:01:49 +0800</pubDate>
      
      <guid>https://kunieone.github.io/posts/nodelist%E5%92%8Chtmlcollection%E5%8C%BA%E5%88%AB/</guid>
      <description>首先 NodeList 和 HTMLCollection 都是 DOM 节点的集合。
NodeList 中包含的节点类型可能是 Element/Text/Comment/Document/DocumentFragment 等，我们知道 nodeType 的种类有 12 种。NodeList 由 Node.childNodes 和 document.querySelectorAll()返回，不同的是 node.ChildNodes 返回的是动态（live）的 NodeList，而 document.querySelectorAll()返回的是静态(static)的 NodeList。 HTMLCollection 包含的节点类型是 Element，且通过 document.getElementByClassName()等方法返回的是动态（live）的 HTMLCollection 集合。 ———————————————— 版权声明：本文为 CSDN 博主「卡卡的笔录」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/m0_38102188/article/details/86299212</description>
    </item>
    
    <item>
      <title>MARKDOWN写作指南</title>
      <link>https://kunieone.github.io/posts/markdown/</link>
      <pubDate>Fri, 17 Jun 2022 22:13:39 +0800</pubDate>
      
      <guid>https://kunieone.github.io/posts/markdown/</guid>
      <description>Markup : - - - - Image with alt :
Markup : ![picture alt](http://via.placeholder.com/200x150 &amp;quot;Title is optional&amp;quot;) Foldable text:
Title 1 Content 1 Content 1 Content 1 Content 1 Content 1
Title 2 Content 2 Content 2 Content 2 Content 2 Content 2
Markup : &amp;lt;details&amp;gt; &amp;lt;summary&amp;gt;Title 1&amp;lt;/summary&amp;gt; &amp;lt;p&amp;gt;Content 1 Content 1 Content 1 Content 1 Content 1&amp;lt;/p&amp;gt; &amp;lt;/details&amp;gt; &amp;lt;h3&amp;gt;HTML&amp;lt;/h3&amp;gt; &amp;lt;p&amp;gt;Some HTML code here&amp;lt;/p&amp;gt; Link to a specific part of the page:
Go To TOP</description>
    </item>
    
    <item>
      <title>Chapter 1</title>
      <link>https://kunieone.github.io/secret/svelte/chapter-1/</link>
      <pubDate>Fri, 17 Jun 2022 12:41:03 +0800</pubDate>
      
      <guid>https://kunieone.github.io/secret/svelte/chapter-1/</guid>
      <description>&lt;p&gt;This is chapter 1 of example doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 1</title>
      <link>https://kunieone.github.io/secret/svelte/nested-chapter/chapter-1/</link>
      <pubDate>Fri, 17 Jun 2022 12:41:03 +0800</pubDate>
      
      <guid>https://kunieone.github.io/secret/svelte/nested-chapter/chapter-1/</guid>
      <description>&lt;p&gt;This is chapter 1 of nested chapter.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 2</title>
      <link>https://kunieone.github.io/secret/svelte/chapter-2/</link>
      <pubDate>Fri, 17 Jun 2022 12:41:03 +0800</pubDate>
      
      <guid>https://kunieone.github.io/secret/svelte/chapter-2/</guid>
      <description>&lt;p&gt;This is chapter 2 of example doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 2</title>
      <link>https://kunieone.github.io/secret/svelte/chapter-3/</link>
      <pubDate>Fri, 17 Jun 2022 12:41:03 +0800</pubDate>
      
      <guid>https://kunieone.github.io/secret/svelte/chapter-3/</guid>
      <description>&lt;p&gt;This is chapter 2 of example doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 2</title>
      <link>https://kunieone.github.io/secret/svelte/chapter-4/</link>
      <pubDate>Fri, 17 Jun 2022 12:41:03 +0800</pubDate>
      
      <guid>https://kunieone.github.io/secret/svelte/chapter-4/</guid>
      <description>&lt;p&gt;This is chapter 2 of example doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 2</title>
      <link>https://kunieone.github.io/secret/svelte/nested-chapter/chapter-2/</link>
      <pubDate>Fri, 17 Jun 2022 12:41:03 +0800</pubDate>
      
      <guid>https://kunieone.github.io/secret/svelte/nested-chapter/chapter-2/</guid>
      <description>&lt;p&gt;This is chapter 2 of nested chapter.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/easystackdevelopment/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/easystackdevelopment/</guid>
      <description>页面路由 BASEURL = memorite.cn 主页路由 / 主页
用户信息路由/user (该路由跳到 404/nouser)
/user/me 我的账号主页预览,如果未登陆，显示注册登陆页面 /user/[uuid] 用户账号主页预览 404 页面 /404
404/nouser 查询不到用户
404/noarticle 查询不到文章
404/nospecial 查询不到专栏
文章页面 /article (该路由跳转到 404/noarticle)
/article/[articleid] 文章浏览 专栏页面 /special专栏(该路由跳转到 404/nospecial)
/special/[artid] 专栏浏览 浏览历史页面 /history 会查询用户是否登陆，如果没登陆，跳转注册登陆路由
收藏夹 /favorites 浏览收藏夹
/favorites/article 浏览收藏夹里的文章 /favorites/user 浏览收藏夹里的用户 /favorites/special 浏览收藏夹里的专栏 /favorites/[special|article|user]/[pageid] 浏览收藏夹里的内容，分页(如果是 1,显示 120 的内容，2 显示 21..40&amp;hellip;如果过大，显示最后一页) </description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/golang/golang%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/golang/golang%E5%8D%8F%E7%A8%8B/</guid>
      <description>Golang协程调度 go调度器的由来 单进程时代：
单一执行，计算机一个任务一个任务处理 多进程操作系统：
使用CPU调度器： 不同的时间片ABC轮流执行 多进程带来了新的问题： 时间片的切换成本（保存现场） 并且使得开发设计变得复杂（状态锁，同步等问题） 为了保证多任务，开了很多线程，高度消耗调度CPU并且消耗内存 进程占用 4GB 线程占用4M 操作系统分为 用户态和内核态
如果我们让内核只看到一个线程，在线程里面开多个小线程（co-routine）协程
1比N
![image-20220607143714277](/Users/jiangxinghuai/Library/Application Support/typora-user-images/image-20220607143714277.png)
M比N：
![image-20220607143904604](/Users/jiangxinghuai/Library/Application Support/typora-user-images/image-20220607143904604.png)
对于go语言，它把
co-routine改成了goroutine，修改了内存（几KB）
并且调度器处理很好
GMP调度器</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/nestjs/controller/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/nestjs/controller/</guid>
      <description>Controller（控制器）负责处理即将到来的请求并且返回响应给客户端。 controller的意图是接收一个特定的请求，路由机制控制了哪个controller将会接收哪些请求。常常每一个controller都有不止一个路由，并且不同的路由执行不同的动作。
为了构建一个基本的controller，我们使用类与装饰器。装饰器能够联系一些类的元数据并且使Nest可以构建路由映射表。（将请求和对应的controller绑定）
提示
你可以使用CRUD生成器nest g resource [name]来快速构建内建的CRUD控制器。
Routing（路由） 在接下来的示例中，我们将使用@Controller装饰器，它需要定义一个基础的controller。我们选择特定一个路由路径，叫做cats。把cats字符串放到装饰器里面
@Controller(&amp;ldquo;cats&amp;rdquo;)，装饰器允许我们轻易地构建一组相关路由的集合，并且最小化重复的代码。
提示
你可以使用CLI nest g controller(co) cats来生成猫路由。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/nestjs/%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/nestjs/%E4%BB%8B%E7%BB%8D/</guid>
      <description>NESTJS NESTJS 介绍 ​	Nestjs是一个用于构建大规模的nodejs服务端应用程序的的高效率框架，它使用的是渐进的Javascript，并且完全支持Typescript（也支持仅使用Javascript开发）并且结合了面向对象编程、函数式编程和函数响应式编程的思想。
​	在这个框架下，Nest充分使用了如Express这样高可靠性的HTTP框架并且同时也可以支持Fastify！！
​	Nest提供了一个在Nodejs框架（Express/Fastify）之上的抽象级，并且直接把express的API暴露给开发者这给了开发者选择使用无数底层平台第三方库的自由
NESTJS 哲学 在近些年内，多亏了Node.js使得Javascript可以成为前后端应用开发的通用语言，这也导致了比如一些像Angular，React和Vue项目的兴起，它们极大的提升了开发者构建更快，可测试，可拓展的前端应用的效率。不过，尽管有很多为Node.js准备的很棒的库，指导和工具，单没有一个解决了“架构”层面上的这个核心问题。
​	NEST提供了一个开箱即用的应用架构服务，允许了开发者和团队能够构建高可测试性，大规模，松耦合并且易维护的应用。该架构理念灵感来自Angular。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/untitled/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/untitled/</guid>
      <description>作者：苏七摘文 链接：https://zhuanlan.zhihu.com/p/503913403 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
动词一字部：
抓，搞，上，下，出，想，谋
动词二字部：
分析，研究，了解，掌握，发现，提出，推进，推动，制定，出台，完善，建立，健全，加强，强化，增强，促进，加深，深化，扩大，落实，细化，突出，建设，营造，开展，发挥，发扬，创新，转变，发展，统一，提高，提升，保持，优化，召开，举行，贯彻，执行，树立，引导，规范，整顿，服务，协调，沟通，配合，合作，支持，加大，开拓，拓展，巩固，保障，保证，形成，指导
名词：
体系，机制，体制，系统，规划，战略，方针，政策，措施，要点，重点，焦点，难点，热点，亮点，矛盾，问题，建设，思想，认识，作风，整治，环境，秩序，作用，地方，基层，传统，运行，监测，监控，调控，监督，工程，计划，行动，创新，增长，方式，模式，转变，质量，水平，效益，会议，文件，精神，意识，服务，协调，沟通，力度，领域，空间，成绩，成就，进展，实效，基础，前提，关键，保障，动力，条件，环节，方法，思路，设想，途径，道路，主意，办法，力气，功夫，台阶，形势，情况，意见，建议，网络，指导，指南，目录，方案
形容词一字部：
多，宽，高，大，好，快，省，新
形容词二字部：
持续，快速，协调，健康，公平，公正，公开，透明，富强，民主，文明，和谐，祥和，优良，良好，合理，稳定，平衡，均衡，稳健，平稳，统一，现代
副词一字部：
狠，早，细，实，好，很，较，再，更
副词二字部：
加快，尽快，抓紧，尽早，整体，充分，继续，深入，自觉，主动，自主，密切，大力，全力，尽力，务必，务求，有效
副词三字部：
进一步
后缀：
化，型，性
词组：
统一思想，提高认识，认清形势，明确任务，加强领导，完善机制，交流经验，研究问题，团结协作，密切配合，真抓实干，开拓进取，突出重点，落实责任，各司其职，各负其责，集中精力，聚精会神，一心一意，心无旁骛，兢兢业业，精益求精，一抓到底，爱岗敬业，求真务实，胸怀全局，拓宽视野。
“新”系列：
新形势 新任务 新挑战 新机遇 新情况 新问题 新困难 新对策 新办法 新局面 新气象 刷新、革新、变新、创新、更新
“者”系列：
守护者 保护者 守望者 践行者 组织者 协调者 旁观者 教育者 监督者管理者 设计者 引导者 实施者 指导者 协助者 决策者 参与者
“外号”系列：
(个人) 先行官 火车头 老黄牛 活地图 辖区通 减压阀 助推器
（集体） 大熔炉 主旋律 接力赛
“性”系列：
自觉性 时效性 复杂性 积极性 实效性 机制性 特殊性 主动性 有效性 体制性 多变性 创造性 坚定性 保障性 危险性 准确性 阶段性 流动性 盲目性 目的性 层次性 稳定性 实用性 预见性 启发性 全局性 科学性 前瞻性 警示性 局部性 局限性 针对性 苗头性 根本性 约束性 普遍性 倾向性 长期性 理论性 典型性 经常性 精确性 系统性 示范性 思想性 果敢性 完整性 必要性 知识性 坚韧性 多样性 重要性 趣味性 敏感性 服务性 先进性 随意性 警惕性 指导性 优越性 反复性 技术性 思想性 战略性 创新性 指导性 目标性 可操作性</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E5%8D%95%E8%AF%8D/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E5%8D%95%E8%AF%8D/</guid>
      <description>denizen 居住条件
purport
savour
reassure
intrusive
hundrum
tapeworm
disfavour
airstrip
scowl
expedient
desegregate
mime
newsreel
irritant
purely
ledge
organ
barrow
starboard
iodide
demote
conscript
picket 罢工纠察
canter
gape
susceptibility
foil
rugger
enpower
madden
flax
forthwith
mortuary
untold
可怕的 gruesome
ooze 渗出
huff
wicked
newsreel
innate
rendition</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80assembly/arm%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80assembly/arm%E4%BB%8B%E7%BB%8D/</guid>
      <description>Arm是啥？ ARM是一个公司，是为精简指令集计算机微处理器提供解决方案的。 arm并不生产芯片，这是出知识产权的。
RISC 精简指令集
C语言 -1-&amp;gt; 汇编 -2-&amp;gt;01指令
2:指令的格式怎么统一？ARM就是这个解决方案
MOV R0, #1 这串指令 ，直接解析成机器码。
arm做的事情就是对指令进行怎么翻译，采用的是流水线的技术。
ARM公司的工作模式： ![image-20220525131045628](/Users/jiangxinghuai/Library/Application Support/typora-user-images/image-20220525131045628.png)
OEM 代工生产公司，把产品制造出来。
很多电子产品的应用模式都是这样的。
ARM的优势 微处理器支持Thumb双指令集，可以兼容 ARM8/16位器件。
既可以工作在16位下，也可以工作在32位下。
大量使用寄存器，执行速度快
大多数数据操作在寄存器完成。
ARM7
ARM9
ARM10E
ARM11
![image-20220525132133577](/Users/jiangxinghuai/Library/Application Support/typora-user-images/image-20220525132133577.png)
虚拟内存管理（随着需求增大，必须使用更大的内存）把一部分内存地址扩到磁盘上，增大空间
ARM各版本 ARM7采用的是冯诺伊曼结构，数据存储器和程序存储器重合。速度相对局限。通过一条总线分时进行。取指令和取操作数不能并行。三级流水线结构（取指、译码、执行）时钟：66mhz。
​	运行一条指令，平均执行1.9个时钟周期。
ARM9为五级流水线技术（取指、译码、执行、缓冲/数据、回写）时钟频率：120Mhz-200Mhz。ARM9采用的是哈佛结构，程序存储器和数据存储器分开，带宽加大。同时大多数DSP都采用此结构。
​	运行一条指令，平均执行1.5个时钟周期。
ARM11为8级流水线。600Mhz时钟频率。
![image-20220525133125217](/Users/jiangxinghuai/Library/Application Support/typora-user-images/image-20220525133125217.png)
一条指令4字节长，三级流水线，PC的地址差八个字节
ARM微处理器的工作状态 ARM状态 都是32（4*8=32位（4字节））位指令 处理器以执行字（32位）方式的ARM指令。 Thumb状态 这里是按照半字（2*8=16位）来读取指令。 什么是字？ 半字？
从偶数地址开始的连续两个字节（16位）构成一个半字。
字：4个字节。
![image-20220525133951372](/Users/jiangxinghuai/Library/Application Support/typora-user-images/image-20220525133951372.png)
两个状态咋切换？ ![image-20220525134051303](/Users/jiangxinghuai/Library/Application Support/typora-user-images/image-20220525134051303.png)
![image-20220525134208860](/Users/jiangxinghuai/Library/Application Support/typora-user-images/image-20220525134208860.png)
![image-20220525134219885](/Users/jiangxinghuai/Library/Application Support/typora-user-images/image-20220525134219885.png)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E9%9A%8F%E6%83%B3%E4%BD%9C%E6%96%87/2013%E8%8B%B1%E4%B8%80%E5%B0%8F%E4%BD%9C%E6%96%87/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E9%9A%8F%E6%83%B3%E4%BD%9C%E6%96%87/2013%E8%8B%B1%E4%B8%80%E5%B0%8F%E4%BD%9C%E6%96%87/</guid>
      <description>2013 英一小作文 (2013) Write an e-mail of about 100 words to a foreign teacher in your college, inviting him/her to be a judge for the upcoming English speech contest.
You should include the details you think necessary. You should write neatly on the ANSwer SHEET. Do not sign your own name at the end of the e-mail. Use &amp;ldquo;Li Ming&amp;rdquo; instead. Do not write the address. (10 points) 思路：按照公务邀请的方法来写。邀请一个老师参加英语演讲。 范文 1: Dear Mr, Wilson,
​ I am writing on behalf of the Student&amp;rsquo; Union to invite you to be a judge for the upcoming English speech contest.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E9%9A%8F%E6%83%B3%E4%BD%9C%E6%96%87/%E8%A8%80%E8%AE%BA%E8%87%AA%E7%94%B1/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E9%9A%8F%E6%83%B3%E4%BD%9C%E6%96%87/%E8%A8%80%E8%AE%BA%E8%87%AA%E7%94%B1/</guid>
      <description>Appropriate Freedom of Speech ​ America has long been one of the most free speech nations. Instead, China is the target of criticism from the Western media for its &amp;ldquo;lack of freedom of speech&amp;rdquo;. As a native Chinese student, let&amp;rsquo;s talk about the so-called freedom of speech, why our country “lacks” this freedom, and most importantly, is it reasonable for our country to stay that way.
​ To start with, we should understand the definition of freedom of speech.</description>
    </item>
    
    <item>
      <title>经典句型</title>
      <link>https://kunieone.github.io/posts/%E7%BB%8F%E5%85%B8%E5%8F%A5%E5%9E%8B/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/posts/%E7%BB%8F%E5%85%B8%E5%8F%A5%E5%9E%8B/</guid>
      <description>可想而知&amp;hellip;
It&amp;rsquo;s conceivable/obvious/apparent that&amp;hellip;
我们绝对不能&amp;hellip;
On no account can we &amp;hellip;
那些什么的人&amp;hellip;
Those who&amp;hellip;
&amp;hellip;值得我们关注
&amp;hellip;.., which is worthy of our attention
该是&amp;hellip;的时候了
It is time + 主语+ 过去式
正如&amp;hellip;生动的描述了&amp;hellip;
As is vividly depicted in the &amp;hellip;, &amp;hellip;
充分理解寓意..
To grasp the full implication
毋庸置疑&amp;hellip;
There is no denying that &amp;hellip;
一个可笑的场景..
A ridiculous situation&amp;hellip;
认真做决定..
To make careful decision
无法理解&amp;hellip;
Beyond one&amp;rsquo;s comprehension
关注..的人寥寥无几
Few people could pay attention to &amp;hellip;
犯下严重的错误..
Commit a terrible blunder&amp;hellip;</description>
    </item>
    
    <item>
      <title>一些单词的高级表达</title>
      <link>https://kunieone.github.io/posts/%E4%B8%80%E4%BA%9B%E5%8D%95%E8%AF%8D%E7%9A%84%E9%AB%98%E7%BA%A7%E8%A1%A8%E8%BE%BE/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/posts/%E4%B8%80%E4%BA%9B%E5%8D%95%E8%AF%8D%E7%9A%84%E9%AB%98%E7%BA%A7%E8%A1%A8%E8%BE%BE/</guid>
      <description> 词义 基础 升级 繁荣兴旺 boom flourish;thrive;prosper 导致 cause lead to; bring about;result in;spark off;conduce to;generate 艰巨的 difficult arduous;heavy 掩盖 cover mask;veil;conceal 消除 clear eliminate;remove;take away 重要的 important crucial;significant;vital 加强 heighten enhance;reinforce;enforce;strengthen 满足 meet satisfy;suit;fill;fulfill;accommodate 流行的 popular prevailing;prevalent;widespread 有益的 useful helpful;beneficial;advantageous </description>
    </item>
    
    <item>
      <title>Chapter 2</title>
      <link>https://kunieone.github.io/docs/svelte/chapter-4/</link>
      <pubDate>Fri, 17 Jun 2022 10:23:36 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/svelte/chapter-4/</guid>
      <description>&lt;p&gt;This is chapter 2 of example doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 2</title>
      <link>https://kunieone.github.io/docs/svelte/chapter-3/</link>
      <pubDate>Fri, 17 Jun 2022 10:23:35 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/svelte/chapter-3/</guid>
      <description>&lt;p&gt;This is chapter 2 of example doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 1</title>
      <link>https://kunieone.github.io/docs/svelte/chapter-1/</link>
      <pubDate>Fri, 17 Jun 2022 10:12:13 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/svelte/chapter-1/</guid>
      <description>&lt;p&gt;This is chapter 1 of example doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 1</title>
      <link>https://kunieone.github.io/docs/svelte/nested-chapter/chapter-1/</link>
      <pubDate>Fri, 17 Jun 2022 10:12:13 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/svelte/nested-chapter/chapter-1/</guid>
      <description>&lt;p&gt;This is chapter 1 of nested chapter.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 2</title>
      <link>https://kunieone.github.io/docs/svelte/chapter-2/</link>
      <pubDate>Fri, 17 Jun 2022 10:12:13 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/svelte/chapter-2/</guid>
      <description>&lt;p&gt;This is chapter 2 of example doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 2</title>
      <link>https://kunieone.github.io/docs/svelte/nested-chapter/chapter-2/</link>
      <pubDate>Fri, 17 Jun 2022 10:12:13 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/svelte/nested-chapter/chapter-2/</guid>
      <description>&lt;p&gt;This is chapter 2 of nested chapter.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/homepage/</link>
      <pubDate>Fri, 17 Jun 2022 09:42:34 +0800</pubDate>
      
      <guid>https://kunieone.github.io/homepage/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
