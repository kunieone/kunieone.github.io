<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>∆STAREVAN</title>
    <link>https://kunieone.github.io/</link>
    <description>Recent content on ∆STAREVAN</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>@Starevan
</copyright>
    <lastBuildDate>Sat, 02 Jul 2022 01:50:11 +0800</lastBuildDate><atom:link href="https://kunieone.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于比较的排序算法复杂度的下界</title>
      <link>https://kunieone.github.io/posts/%E5%9F%BA%E4%BA%8E%E9%A6%99%E5%86%9C%E4%BF%A1%E6%81%AF%E7%86%B5%E8%AE%A1%E7%AE%97%E6%AF%94%E8%BE%83%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E7%9A%84%E4%B8%8B%E7%95%8C/</link>
      <pubDate>Sat, 02 Jul 2022 01:50:11 +0800</pubDate>
      
      <guid>https://kunieone.github.io/posts/%E5%9F%BA%E4%BA%8E%E9%A6%99%E5%86%9C%E4%BF%A1%E6%81%AF%E7%86%B5%E8%AE%A1%E7%AE%97%E6%AF%94%E8%BE%83%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E7%9A%84%E4%B8%8B%E7%95%8C/</guid>
      <description>《算法导论》中有一节讲的是“（比较）排序算法时间的下界”，本文将论述同一个问题，思路略有差异。本文将从信息熵的角度论述排序算法时间复杂度的下界。若本文论述过程中有错误或是不足，还请各位指正。
我们先来回忆一下香农的信息熵公式：
香农对信息的定义是事物运动状态和存在方式的不确定性描述。事件$A_i$发生所含有的信息量（自信息量）可以表示为: $$ I(A_i)=\log_2\frac{1}{P(A_i)} % \tag{6} $$
对于随机变量$X$而言，定义其平均自信息量为信息熵，可表示为: $$H(x)=\sum P(A_i)\log_2\frac{1}{P(A_i)}$$</description>
    </item>
    
    <item>
      <title>招 人</title>
      <link>https://kunieone.github.io/posts/%E6%8B%9B%E4%BA%BA/</link>
      <pubDate>Tue, 28 Jun 2022 17:26:26 +0800</pubDate>
      
      <guid>https://kunieone.github.io/posts/%E6%8B%9B%E4%BA%BA/</guid>
      <description>私企小公司： 面试官：“用过XX技术么？”
程序员：“了解一点，不太熟”
面试官：“说下XX的执行过程”
程序员：“这好像是从XX开始，然后再到XX，后面，后面记不清了”
面试官：“哦，我们现在做的这个项目是比较有前景的，是未来的趋势。公司将来也会有大的发展。入职后如果表现优秀，可以分配股权”
程序员：“哦”。
面试官：“下周能来上班吗？”
程序员：“可以的。”~~~~
面试官：“那你下周一来办入职吧。”</description>
    </item>
    
    <item>
      <title>几种不同的OOP思想</title>
      <link>https://kunieone.github.io/posts/%E5%87%A0%E7%A7%8D%E4%B8%8D%E5%90%8C%E7%9A%84oop%E6%80%9D%E6%83%B3/</link>
      <pubDate>Tue, 28 Jun 2022 17:17:16 +0800</pubDate>
      
      <guid>https://kunieone.github.io/posts/%E5%87%A0%E7%A7%8D%E4%B8%8D%E5%90%8C%E7%9A%84oop%E6%80%9D%E6%83%B3/</guid>
      <description>OOP OOP是一种思想，但是现在的编程语言只是对这种思想的实现。
OOP是一种程序设计的范式，是设计思想，在多种现代编程语言中都提供语法支持。然而，OOP就只是我们所知道的封装继承多态吗? 套用OOP的说法，OOP的设计思想是抽象，而OOP的编程语法只是实现。
OOP的创始人,第一个OOP语言Smalltalk的设计者Alan Kay这么说
I thought of objects being like biological cells and/or individual computers on a network, only able to communicate with messages (so messaging came at the very beginning &amp;ndash; it took a while to see how to do messaging in a programming language efficiently enough to be useful) OOP to me means only messaging, local retention and protection and hiding of state-process, and extreme late-binding of all things.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/posts/%E8%8B%A6%E9%9A%BE%E7%A9%B6%E7%AB%9F%E5%B8%A6%E6%9D%A5%E4%BB%80%E4%B9%88/</link>
      <pubDate>Fri, 24 Jun 2022 09:55:59 +0800</pubDate>
      
      <guid>https://kunieone.github.io/posts/%E8%8B%A6%E9%9A%BE%E7%A9%B6%E7%AB%9F%E5%B8%A6%E6%9D%A5%E4%BB%80%E4%B9%88/</guid>
      <description>一个人大概率不会因为苦难变得更好，因为苦难，就是苦难本身。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/1/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/1/</guid>
      <description>深入理解操作系统 第一章 第一章的主要内容是 : 操作系统的一些知识
操作系统是什么？ 用户角度：操作系统是一个控制软件
管理应用程序
为应用程序提供服务
杀死应用程序</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/10/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/10/</guid>
      <description>深入理解操作系统 第十章 第十章的主要内容是：信号量和管程
信号量 信号量的抽象数据类型
一个整形(sem),具有两个原子操作 P(): sem减一,如果sem&amp;lt;0,等待,否则继续 V(): sem加一,如果sem≤0,唤醒一个等待的P 信号量是整数</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/11/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/11/</guid>
      <description>深入理解操作系统 第十一章 第十一章的主要内容是：死锁和进程通信
死锁问题 一组阻塞的进程持有一种资源等待获取另一个进程所占有的一个资源
示例:
系统有2个磁带驱动器 P1和P2各有一个,都需要另外一个 系统模型 资源类型R1,R2,..,Rm(CPU, memory space, IO devices)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/12/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/12/</guid>
      <description>深入理解操作系统 第十二章 第十二章的主要内容是：文件管理
基本概念 文件系统和文件 文件系统: 一种用于持久性存储的系统抽象
在存储上: 组织,控制,导航,访问和检索数据 在大多数计算机系统包含文件系统 个人电脑,服务器,笔记本电脑 ipod,tivo,机顶盒,手机,电脑 google可能也是由一个文件系统构成的 文件: 文件系统中的一个单元的相关数据在操作系统中的抽象</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/2/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/2/</guid>
      <description>深入理解操作系统 第二章 第二章的主要内容是 : 操作系统的异常/中断/系统调用
计算机探究计算机启动过程 作用解析
Disk : 存放OS和Bootloader</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/3/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/3/</guid>
      <description>深入理解操作系统 第三章 第三章的主要内容是：操作系统的物理内存管理
计算机体系结构 CPU 内存 I/O 内存分层体系 内存分层体系 运行内存(主存) / 磁盘(虚拟内存).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/4/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/4/</guid>
      <description>深入理解操作系统 第四章 第四章的主要内容是：操作系统的非连续内存分配
第三章介绍的是连续内存管理, 即 : 操作系统加载到内存以及程序加载到内存中时, 分配一块连续的空闲(内存)块. 但是容易出现碎片问题, 这一章介绍的非连续内存分配可以有效的减少碎片的出现.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/5/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/5/</guid>
      <description>深入理解操作系统 第五章 第五章的主要内容是：操作系统的虚拟内存管理技术
虚拟内存的起因 使用硬盘/磁盘使更多的程序在有限的内存中运行
理想的存储器 : 更大更快更便宜和非易失性的存储区
覆盖技术 如果是程序太大, 超出了内存的容量, 可以采用手动的概率(overlay)技术, 只把需要的指令和数据保存在内存当中</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/6/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/6/</guid>
      <description>深入理解操作系统 第六章 第六章的主要内容是：操作系统的虚拟内存管理技术中的页面置换算法
功能与目标 功能 : 当缺页中断发生, 需要调入新的页面而内存已满时, 选择内存当中哪个物理页面被置换.
目标 : 尽可能地减少页面的换进换出次数(即缺页中断的次数).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/7/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/7/</guid>
      <description>深入理解操作系统 第七章 第七章的主要内容是：进程
进程(process)描述 进程定义 进程 : 一个具有一定独立功能的程序在一个数据集合上的一次动态执行过程.
进程的组成 进程包括 :</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/8/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/8/</guid>
      <description>深入理解操作系统 第八章 第八章的主要内容是：调度算法(感觉清华这门课程前几章比较精彩,后续讲的有点混乱)
背景 上下文切换 切换CPU的当前任务, 从一个进程/线程到另一个 保存当前进程/线程在PCB/TCB中的执行上下文(CPU状态) 读取下一个进程/线程的上下文 CPU调度 从就绪队列中挑选一个进程/线程作为CPU将要运行的下一个进程/线程 调度程序: 挑选进程/线程的内核函数(通过一些调度策略) 什么时候进行调度?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/operating-systems/9/</link>
      <pubDate>Wed, 22 Jun 2022 18:15:12 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/operating-systems/9/</guid>
      <description>深入理解操作系统 第九章 第九章的主要内容是：同步
背景 第一章到第八章内容, 到目前为止
多道程序设计: 现代操作系统的重要特性 并行很有用(为什么?) 提示: 多个并发实体: CPU IO 用户 等 进程,线程: 操作系统抽象出来用于支持多道程序设计 CPU调度: 实现多道程序设计的机制 调度算法: 不同的策略 独立的线程:</description>
    </item>
    
    <item>
      <title>深入理解操作系统学习笔记</title>
      <link>https://kunieone.github.io/posts/deep_into_operatingsystem/</link>
      <pubDate>Wed, 22 Jun 2022 18:12:06 +0800</pubDate>
      
      <guid>https://kunieone.github.io/posts/deep_into_operatingsystem/</guid>
      <description>&lt;h1 id=&#34;第一章&#34;&gt;第一章&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;第一章的主要内容是 : 操作系统的一些知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;操作系统是什么&#34;&gt;操作系统是什么？&lt;/h3&gt;
&lt;p&gt;用户角度：操作系统是一个控制软件&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>解答你人生疑问的书</title>
      <link>https://kunieone.github.io/posts/%E8%A7%A3%E7%AD%94%E4%BD%A0%E4%BA%BA%E7%94%9F%E7%96%91%E9%97%AE%E7%9A%84%E4%B9%A6/</link>
      <pubDate>Sun, 19 Jun 2022 09:31:26 +0800</pubDate>
      
      <guid>https://kunieone.github.io/posts/%E8%A7%A3%E7%AD%94%E4%BD%A0%E4%BA%BA%E7%94%9F%E7%96%91%E9%97%AE%E7%9A%84%E4%B9%A6/</guid>
      <description>若干年后的我，也许会忘了安培定律、摩尔质量之类什么理化生的具体知识，
但我永远忘不了
经济决定政治和文化
矛盾双方的对立统一
事物从量变到质变的发展
以及历史唯物主义，
生产力决定生产关系
经济基础决定上层建筑
人民群众是社会历史的主体
它让我意识到我有着什么样的三观</description>
    </item>
    
    <item>
      <title>云原生是个啥</title>
      <link>https://kunieone.github.io/posts/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%98%AF%E4%B8%AA%E5%95%A5/</link>
      <pubDate>Sun, 19 Jun 2022 09:24:57 +0800</pubDate>
      
      <guid>https://kunieone.github.io/posts/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%98%AF%E4%B8%AA%E5%95%A5/</guid>
      <description>大家言必称云原生，却鲜少有人告诉你到底什么是云原生，若是找资料来看，读完大多会感觉云绕雾罩，一知半解，总之虚得很；甚至会让你一度怀疑自己的智商，不过我对于读不懂的文章，一律归因于写文章的人太蠢，当然这不一定是事实，但这样的思考方式能让我避免陷入自我怀疑的负面情绪。
何谓云原生？ 技术的变革，一定是思想先行，云原生是一种构建和运行应用程序的方法，是一套技术体系和方法论。云原生（CloudNative）是一个组合词，Cloud+Native。Cloud 表示应用程序位于云中，而不是传统的数据中心；Native 表示应用程序从设计之初即考虑到云的环境，原生为云而设计，在云上以最佳姿势运行，充分利用和发挥云平台的弹性+分布式优势。
Pivotal 公司的 Matt Stine 于 2013 年首次提出云原生（CloudNative）的概念；2015 年，云原生刚推广时，Matt Stine 在《迁移到云原生架构》一书中定义了符合云原生架构的几个特征：12 因素、微服务、自敏捷架构、基于 API 协作、扛脆弱性；到了 2017 年，Matt Stine 在接受 InfoQ 采访时又改了口风，将云原生架构归纳为模块化、可观察、可部署、可测试、可替换、可处理 6 特质；而 Pivotal 最新官网对云原生概括为 4 个要点：DevOps+持续交付+微服务+容器。</description>
    </item>
    
    <item>
      <title>蓝桥杯的一道题</title>
      <link>https://kunieone.github.io/posts/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9A%84%E4%B8%80%E9%81%93%E9%A2%98-%E5%88%87%E5%BF%8C%E7%9C%BC%E9%AB%98%E6%89%8B%E4%BD%8E/</link>
      <pubDate>Sat, 18 Jun 2022 21:11:27 +0800</pubDate>
      
      <guid>https://kunieone.github.io/posts/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9A%84%E4%B8%80%E9%81%93%E9%A2%98-%E5%88%87%E5%BF%8C%E7%9C%BC%E9%AB%98%E6%89%8B%E4%BD%8E/</guid>
      <description>越看越气，比赛时后眼睛花了，总是发现自己随机数函数是个错的，其实看错了代码块。 这是一道按要求生成 json 的题，不多说，主要是几个简单的正则表达式
/{{integer\(([0-9]+),\s*([0-9]+)\)}}/; /{{repeat\(([0-9]+),\s*([0-9]+)\)}}/; /{{repeat\(([0-9]+)\)}}/; 之后的就简单了:
const rand = (min, max) =&amp;gt; parseInt(Math.</description>
    </item>
    
    <item>
      <title>css 的隐藏和不显示</title>
      <link>https://kunieone.github.io/posts/%E9%9A%90%E8%97%8F%E5%92%8C%E4%B8%8D%E6%98%BE%E7%A4%BA/</link>
      <pubDate>Sat, 18 Jun 2022 20:41:20 +0800</pubDate>
      
      <guid>https://kunieone.github.io/posts/%E9%9A%90%E8%97%8F%E5%92%8C%E4%B8%8D%E6%98%BE%E7%A4%BA/</guid>
      <description>其实 transform:scale(0,0);也可以
display:none;
display 翻译成中文是显示、展览的意思；将 display 的属性改为 none 可以实现元素的隐藏，元素和盒子模型也不生成，被隐藏的元素不占位置，看不见摸不着，它会导致浏览器的重排和重绘。</description>
    </item>
    
    <item>
      <title>Linux 下文件的三个时间：ctime、mtime、atime 的区别</title>
      <link>https://kunieone.github.io/posts/linux_time/</link>
      <pubDate>Sat, 18 Jun 2022 03:28:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/posts/linux_time/</guid>
      <description>Linux 下文件的三个时间：ctime、mtime、atime 的区别
modification time(mtime):内容修改时间
这里的修改时间指的是文件的内容发生变化，而更新的时间。
Eg:vi 后保存文件。
status time(ctime):状态修改时间</description>
    </item>
    
    <item>
      <title>脚本自动给markdown添加front_matter</title>
      <link>https://kunieone.github.io/posts/%E6%83%B3%E6%B3%95%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E7%BB%99%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E6%97%B6%E9%97%B4/</link>
      <pubDate>Sat, 18 Jun 2022 03:05:22 +0800</pubDate>
      
      <guid>https://kunieone.github.io/posts/%E6%83%B3%E6%B3%95%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E7%BB%99%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E6%97%B6%E9%97%B4/</guid>
      <description>目前的想法: 使用 ruby 给文档添加时间 子模块 遍历目录
查找 front_matter，分几种情况：
有合格的 date 和 lastmod 字段 没有这两个时间字段 有但是不完整 针对一个 md 文件，获得该文件的创建时间和最后修改时间，，合理插入到 front_matter。</description>
    </item>
    
    <item>
      <title>NodeList和HTMLCollection有什么区别</title>
      <link>https://kunieone.github.io/posts/nodelist%E5%92%8Chtmlcollection%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sat, 18 Jun 2022 03:01:49 +0800</pubDate>
      
      <guid>https://kunieone.github.io/posts/nodelist%E5%92%8Chtmlcollection%E5%8C%BA%E5%88%AB/</guid>
      <description>首先 NodeList 和 HTMLCollection 都是 DOM 节点的集合。
NodeList 中包含的节点类型可能是 Element/Text/Comment/Document/DocumentFragment 等，我们知道 nodeType 的种类有 12 种。NodeList 由 Node.</description>
    </item>
    
    <item>
      <title>MARKDOWN写作指南</title>
      <link>https://kunieone.github.io/posts/markdown/</link>
      <pubDate>Fri, 17 Jun 2022 22:13:39 +0800</pubDate>
      
      <guid>https://kunieone.github.io/posts/markdown/</guid>
      <description>Markup : - - - - Image with alt :</description>
    </item>
    
    <item>
      <title>Chapter 1</title>
      <link>https://kunieone.github.io/secret/svelte/chapter-1/</link>
      <pubDate>Fri, 17 Jun 2022 12:41:03 +0800</pubDate>
      
      <guid>https://kunieone.github.io/secret/svelte/chapter-1/</guid>
      <description>&lt;p&gt;This is chapter 1 of example doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 1</title>
      <link>https://kunieone.github.io/secret/svelte/nested-chapter/chapter-1/</link>
      <pubDate>Fri, 17 Jun 2022 12:41:03 +0800</pubDate>
      
      <guid>https://kunieone.github.io/secret/svelte/nested-chapter/chapter-1/</guid>
      <description>&lt;p&gt;This is chapter 1 of nested chapter.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 2</title>
      <link>https://kunieone.github.io/secret/svelte/chapter-2/</link>
      <pubDate>Fri, 17 Jun 2022 12:41:03 +0800</pubDate>
      
      <guid>https://kunieone.github.io/secret/svelte/chapter-2/</guid>
      <description>&lt;p&gt;This is chapter 2 of example doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 2</title>
      <link>https://kunieone.github.io/secret/svelte/chapter-3/</link>
      <pubDate>Fri, 17 Jun 2022 12:41:03 +0800</pubDate>
      
      <guid>https://kunieone.github.io/secret/svelte/chapter-3/</guid>
      <description>&lt;p&gt;This is chapter 2 of example doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 2</title>
      <link>https://kunieone.github.io/secret/svelte/chapter-4/</link>
      <pubDate>Fri, 17 Jun 2022 12:41:03 +0800</pubDate>
      
      <guid>https://kunieone.github.io/secret/svelte/chapter-4/</guid>
      <description>&lt;p&gt;This is chapter 2 of example doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 2</title>
      <link>https://kunieone.github.io/secret/svelte/nested-chapter/chapter-2/</link>
      <pubDate>Fri, 17 Jun 2022 12:41:03 +0800</pubDate>
      
      <guid>https://kunieone.github.io/secret/svelte/nested-chapter/chapter-2/</guid>
      <description>&lt;p&gt;This is chapter 2 of nested chapter.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/easystackdevelopment/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/easystackdevelopment/</guid>
      <description>页面路由 BASEURL = memorite.cn 主页路由 / 主页
用户信息路由/user (该路由跳到 404/nouser)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/golang/golang%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/golang/golang%E5%8D%8F%E7%A8%8B/</guid>
      <description>Golang协程调度 go调度器的由来 单进程时代：
单一执行，计算机一个任务一个任务处理 多进程操作系统：
使用CPU调度器： 不同的时间片ABC轮流执行 多进程带来了新的问题： 时间片的切换成本（保存现场） 并且使得开发设计变得复杂（状态锁，同步等问题） 为了保证多任务，开了很多线程，高度消耗调度CPU并且消耗内存 进程占用 4GB 线程占用4M 操作系统分为 用户态和内核态</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/nestjs/controller/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/nestjs/controller/</guid>
      <description>Controller（控制器）负责处理即将到来的请求并且返回响应给客户端。 controller的意图是接收一个特定的请求，路由机制控制了哪个controller将会接收哪些请求。常常每一个controller都有不止一个路由，并且不同的路由执行不同的动作。
为了构建一个基本的controller，我们使用类与装饰器。装饰器能够联系一些类的元数据并且使Nest可以构建路由映射表。（将请求和对应的controller绑定）
提示
你可以使用CRUD生成器nest g resource [name]来快速构建内建的CRUD控制器。
Routing（路由） 在接下来的示例中，我们将使用@Controller装饰器，它需要定义一个基础的controller。我们选择特定一个路由路径，叫做cats。把cats字符串放到装饰器里面</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/nestjs/%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/nestjs/%E4%BB%8B%E7%BB%8D/</guid>
      <description>NESTJS NESTJS 介绍 ​	Nestjs是一个用于构建大规模的nodejs服务端应用程序的的高效率框架，它使用的是渐进的Javascript，并且完全支持Typescript（也支持仅使用Javascript开发）并且结合了面向对象编程、函数式编程和函数响应式编程的思想。
​	在这个框架下，Nest充分使用了如Express这样高可靠性的HTTP框架并且同时也可以支持Fastify！！
​	Nest提供了一个在Nodejs框架（Express/Fastify）之上的抽象级，并且直接把express的API暴露给开发者这给了开发者选择使用无数底层平台第三方库的自由
NESTJS 哲学 在近些年内，多亏了Node.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/untitled/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/untitled/</guid>
      <description>作者：苏七摘文 链接：https://zhuanlan.zhihu.com/p/503913403 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
动词一字部：
抓，搞，上，下，出，想，谋
动词二字部：
分析，研究，了解，掌握，发现，提出，推进，推动，制定，出台，完善，建立，健全，加强，强化，增强，促进，加深，深化，扩大，落实，细化，突出，建设，营造，开展，发挥，发扬，创新，转变，发展，统一，提高，提升，保持，优化，召开，举行，贯彻，执行，树立，引导，规范，整顿，服务，协调，沟通，配合，合作，支持，加大，开拓，拓展，巩固，保障，保证，形成，指导
名词：
体系，机制，体制，系统，规划，战略，方针，政策，措施，要点，重点，焦点，难点，热点，亮点，矛盾，问题，建设，思想，认识，作风，整治，环境，秩序，作用，地方，基层，传统，运行，监测，监控，调控，监督，工程，计划，行动，创新，增长，方式，模式，转变，质量，水平，效益，会议，文件，精神，意识，服务，协调，沟通，力度，领域，空间，成绩，成就，进展，实效，基础，前提，关键，保障，动力，条件，环节，方法，思路，设想，途径，道路，主意，办法，力气，功夫，台阶，形势，情况，意见，建议，网络，指导，指南，目录，方案</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E5%8D%95%E8%AF%8D/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E5%8D%95%E8%AF%8D/</guid>
      <description>denizen 居住条件
purport
savour
reassure
intrusive
hundrum
tapeworm
disfavour
airstrip</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80assembly/arm%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80assembly/arm%E4%BB%8B%E7%BB%8D/</guid>
      <description>Arm是啥？ ARM是一个公司，是为精简指令集计算机微处理器提供解决方案的。 arm并不生产芯片，这是出知识产权的。
RISC 精简指令集
C语言 -1-&amp;gt; 汇编 -2-&amp;gt;01指令
2:指令的格式怎么统一？ARM就是这个解决方案</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E9%9A%8F%E6%83%B3%E4%BD%9C%E6%96%87/2013%E8%8B%B1%E4%B8%80%E5%B0%8F%E4%BD%9C%E6%96%87/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E9%9A%8F%E6%83%B3%E4%BD%9C%E6%96%87/2013%E8%8B%B1%E4%B8%80%E5%B0%8F%E4%BD%9C%E6%96%87/</guid>
      <description>2013 英一小作文 (2013) Write an e-mail of about 100 words to a foreign teacher in your college, inviting him/her to be a judge for the upcoming English speech contest.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E9%9A%8F%E6%83%B3%E4%BD%9C%E6%96%87/%E8%A8%80%E8%AE%BA%E8%87%AA%E7%94%B1/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/%E9%9A%8F%E6%83%B3%E4%BD%9C%E6%96%87/%E8%A8%80%E8%AE%BA%E8%87%AA%E7%94%B1/</guid>
      <description>Appropriate Freedom of Speech ​ America has long been one of the most free speech nations.</description>
    </item>
    
    <item>
      <title>经典句型</title>
      <link>https://kunieone.github.io/posts/%E7%BB%8F%E5%85%B8%E5%8F%A5%E5%9E%8B/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/posts/%E7%BB%8F%E5%85%B8%E5%8F%A5%E5%9E%8B/</guid>
      <description>可想而知&amp;hellip;
It&amp;rsquo;s conceivable/obvious/apparent that&amp;hellip;
我们绝对不能&amp;hellip;
On no account can we &amp;hellip;</description>
    </item>
    
    <item>
      <title>一些单词的高级表达</title>
      <link>https://kunieone.github.io/posts/%E4%B8%80%E4%BA%9B%E5%8D%95%E8%AF%8D%E7%9A%84%E9%AB%98%E7%BA%A7%E8%A1%A8%E8%BE%BE/</link>
      <pubDate>Fri, 17 Jun 2022 11:03:40 +0800</pubDate>
      
      <guid>https://kunieone.github.io/posts/%E4%B8%80%E4%BA%9B%E5%8D%95%E8%AF%8D%E7%9A%84%E9%AB%98%E7%BA%A7%E8%A1%A8%E8%BE%BE/</guid>
      <description> 词义 基础 升级 繁荣兴旺 boom flourish;thrive;prosper 导致 cause lead to; bring about;result in;spark off;conduce to;generate 艰巨的 difficult arduous;heavy 掩盖 cover mask;veil;conceal 消除 clear eliminate;remove;take away 重要的 important crucial;significant;vital 加强 heighten enhance;reinforce;enforce;strengthen 满足 meet satisfy;suit;fill;fulfill;accommodate 流行的 popular prevailing;prevalent;widespread 有益的 useful helpful;beneficial;advantageous </description>
    </item>
    
    <item>
      <title>Chapter 2</title>
      <link>https://kunieone.github.io/docs/svelte/chapter-4/</link>
      <pubDate>Fri, 17 Jun 2022 10:23:36 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/svelte/chapter-4/</guid>
      <description>&lt;p&gt;This is chapter 2 of example doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 2</title>
      <link>https://kunieone.github.io/docs/svelte/chapter-3/</link>
      <pubDate>Fri, 17 Jun 2022 10:23:35 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/svelte/chapter-3/</guid>
      <description>&lt;p&gt;This is chapter 2 of example doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 1</title>
      <link>https://kunieone.github.io/docs/svelte/chapter-1/</link>
      <pubDate>Fri, 17 Jun 2022 10:12:13 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/svelte/chapter-1/</guid>
      <description>&lt;p&gt;This is chapter 1 of example doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 1</title>
      <link>https://kunieone.github.io/docs/svelte/nested-chapter/chapter-1/</link>
      <pubDate>Fri, 17 Jun 2022 10:12:13 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/svelte/nested-chapter/chapter-1/</guid>
      <description>&lt;p&gt;This is chapter 1 of nested chapter.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 2</title>
      <link>https://kunieone.github.io/docs/svelte/chapter-2/</link>
      <pubDate>Fri, 17 Jun 2022 10:12:13 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/svelte/chapter-2/</guid>
      <description>&lt;p&gt;This is chapter 2 of example doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 2</title>
      <link>https://kunieone.github.io/docs/svelte/nested-chapter/chapter-2/</link>
      <pubDate>Fri, 17 Jun 2022 10:12:13 +0800</pubDate>
      
      <guid>https://kunieone.github.io/docs/svelte/nested-chapter/chapter-2/</guid>
      <description>&lt;p&gt;This is chapter 2 of nested chapter.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/homepage/</link>
      <pubDate>Fri, 17 Jun 2022 09:42:34 +0800</pubDate>
      
      <guid>https://kunieone.github.io/homepage/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/docs/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/7/2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunieone.github.io/docs/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/7/2/</guid>
      <description>mafia-黑手党
Britain has for decades helped a mafia state stash its stolen money.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kunieone.github.io/posts/%E4%BB%80%E4%B9%88%E6%98%AF%E9%9B%B6%E6%88%90%E6%9C%AC%E6%8A%BD%E8%B1%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunieone.github.io/posts/%E4%BB%80%E4%B9%88%E6%98%AF%E9%9B%B6%E6%88%90%E6%9C%AC%E6%8A%BD%E8%B1%A1/</guid>
      <description>啊外哇</description>
    </item>
    
    <item>
      <title>gRPC/RPC</title>
      <link>https://kunieone.github.io/posts/grpc%E6%98%AF%E4%B8%AA%E5%95%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunieone.github.io/posts/grpc%E6%98%AF%E4%B8%AA%E5%95%A5/</guid>
      <description>什么是RPC？ Remote Procedure Call的简称，中文叫做远程过程调用
假如有两台服务器，一个应用部署在A服务器上，想要调用另一个B服务器上提供的一个函数方法，由于他们不在同一个地址空间，不能直接调用，需要通过网络来表达调用的语意和传达调用的数据。
比如这样
Employee getEmployeeByName(String fullName) 那么首先需要解决通讯的问题，主要是通过客户端和服务器之间建立TCP连接，远程过程调用的所有交换数据都在这个链接里面传输。连接可以是按需连接，调用结束之后就断掉，也可以是长连接，多个远程过程调用共享同一个连接。</description>
    </item>
    
    <item>
      <title>为何“取消文化”毒性满满？</title>
      <link>https://kunieone.github.io/posts/%E5%8F%96%E6%B6%88%E6%96%87%E5%8C%96/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunieone.github.io/posts/%E5%8F%96%E6%B6%88%E6%96%87%E5%8C%96/</guid>
      <description>原文：
文/莉莉·西弗敦
Why Cancel Culture Is Toxic
By Lily Silverton</description>
    </item>
    
  </channel>
</rss>
